return(calc_df)
}
mean_sd(gapminder, continent, lifeExp)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
mean_sd(gapminder, year, lifeExp)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not a numeric column, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
mean_sd(gapminder, year, lifeExp)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not a numeric column, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
mean_sd(gapminder, year, continent)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
mean_sd(gapminder, year, continent)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 2, 3, 4, 5, NA, 6),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.7))
mean_sd(df1, time, value)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, NA, 0.7))
mean_sd(df1, time, value)
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 1, 4, 3 2, 3, 4, 5, NA, 6, 7),
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 1, 4, 3 2, 3, 4, 5, NA, 6, 7),
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, NA, 0.7, 0.5, 0.3))
#a simple function to take mean and sd of a specific column in the dataframe
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.6, NA, 0.7, 0.5, 0.3))
mean_sd(df1, time, value)
library(datateachr)
library(tidyverse)
library(gapminder)
library(testthat)
library(dplyr)
#' Mean and SD for your dataset
#'
#' @param data the dataset you will want to run the mean and sd calculations on
#' @param group the group that you are interested in finding these values for
#' @param col_x the specific value type you'd like to know these summary statistics for
#'
#' @return return the dataframe including the new data calculated
#' @export
#'
#' @examples
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column you've selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
df1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.6, NA, 0.7, 0.5, 0.3))
mean_sd(gapminder, country, gdpPercap)
#Example 1: making a simple dataframe with some repeated values and NA's
df1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.6, NA, 0.7, 0.5, 0.3))
mean_sd(df1, time, value)
mean_sd(gapminder, continent, pop)
#Example 1
df1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.6, NA, 0.7, 0.5, 0.3))
mean_sd(df1, time, value)
#Example 2
mean_sd(gapminder, continent, pop)
#Example 3
mean_sd(gapminder, pop, continent)
mtcars
#Example 1
df1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.6, NA, 0.7, 0.5, 0.3))
mean_sd(df1, time, value)
#Example 2
mean_sd(gapminder, continent, pop)
#Example 3
mean_sd(gapminder, pop, continent)
test_that("Some basic tests", {
expect_failure(mean_sd(mtcars, as.factor(cyl), as.factor(vs)))
})
test_that("Some basic tests", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)))
})
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The fs you've selected is not numeric")
})
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric"),
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2
test_that("Output is correct", {
expect_is(mean_sd(gapminder, continent, gdpPercap))
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2
test_that("Output is correct", {
expect_is(mean_sd(gapminder, continent, gdpPercap), tibble())
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2
test_that("Output is correct", {
expect_is(mean_sd(gapminder, continent, gdpPercap), tbl_df)
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2
test_that("Output is correct", {
expect_type(mean_sd(gapminder, continent, gdpPercap), tbl_df)
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, country), "The column you've selected is not numeric, it is: factor"
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, country), "The column you've selected is not numeric, it is: factor")
})
#Test 2
test_that("Output is correct", {
expect_
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, country), "The column you've selected is not numeric, it is: factor")
})
#Test 2
# test_that("Output is correct", {
#     expect_
# })
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, continent), "The column you've selected is not numeric, it is: factor")
})
#Test 2
# test_that("Output is correct", {
#     expect_
# })
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric"),
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, continent), "The column you've selected is not numeric, it is: factor")
})
#Test 2
# test_that("Output is correct", {
#     expect_
# })
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, continent), "The column you've selected is not numeric, it ")
})
#Test 2
# test_that("Output is correct", {
#     expect_snapshot_value(mean_sd)
# })
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
expect_message(mean_sd(gapminder, lifeExp, continent), "The column you've selected is not numeric")
})
#Test 2
# test_that("Output is correct", {
#     expect_snapshot_value(mean_sd)
# })
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2
test_that("Output is correct", {
expect_snapshot_value(mean_sd(mtcars, as.factor(vs), mpg))
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2, create a test dataframe
df2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df2)
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2, create a test dataframe
df2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df2)
expect_s3_class(mean_sd(df1, time, values), "data.frame")
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2, create a test dataframe
df2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df2)
expect_s3_class(mean_sd(df1, time, value), "data.frame")
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2, create a test dataframe for this one
df2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df2)
expect_s3_class(mean_sd(df1, time, value), "")
})
#Test 1
test_that("Checking that errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column you've selected is not numeric")
})
#Test 2, create a test dataframe for this one
df2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df2)
expect_s3_class(mean_sd(df1, time, value), "tbl")
})
#Test 1
test_that("Checking errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column selected is not numeric")
})
#Test 2, create a test dataframe for this one
df_2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df_2)
expect_s3_class(mean_sd(df_1, time, value), "tbl")
})
#' # Title
#' Mean and SD for your dataset
#'
#' ## Description
#' This function will calculate the mean and standard deviation values for a variable of interest, specific to a group that you are interested in, the variable of interest must be numeric for this to work.
#'
#' @param data the dataset you will want to run the mean and sd calculations on, named data as it is a clear descriptor of what this variable is doing in the function
#' @param group the group that you are interested in finding these values for, named group as it is a clear descriptor of what you should be entering in this function
#' @param col_x the specific value type you'd like to know these summary statistics for, while 'x' may have also been useful, this encourages the user to think more specifically about the column they will be entering, perhaps more helpful if you're new to code like me!
#'
#' @return return a tibble that includes the new data calculated as well as all the previous data, it differs from the summarise() function in dplyr this way
#'
#' @examples please see exercise 3.
mean_sd <- function(data, group, col_x) {
calculation_check <- dplyr::summarise(data,
is_numeric_col = is.numeric({{ col_x }}),
class_col = class({{ col_x }}))
if (!(calculation_check$is_numeric_col)) {
stop("The column selected is not numeric, it is: ", calculation_check$class_col)
}
calc_df <- data %>%
group_by({{ group }}) %>%
mutate(
mean_value = mean({{ col_x }}),
sd_value = sd({{ col_x }})
)
return(calc_df)
}
mean_sd(gapminder, country, gdpPercap)
#Test 1
test_that("Checking errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column selected is not numeric")
})
#Test 2, create a test dataframe for this one
df_2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df_2)
expect_s3_class(mean_sd(df_1, time, value), "tbl")
})
mtcars
#Example 1
df_1 <- data.frame(time = c(1, 1, 4, 3, 2, 3, 4, 5, NA, 6, 7),
value = c(0.3, 0.4, 0.9, 2, 8, 0.3, 0.6, NA, 0.7, 0.5, 0.3))
mean_sd(df_1, time, value)
#Example 2
mean_sd(gapminder, continent, pop)
#Example 3
mean_sd(gapminder, pop, continent)
#Test 1
test_that("Checking errors function properly", {
expect_error(mean_sd(mtcars, as.factor(cyl), as.factor(vs)), "The column selected is not numeric")
})
#Test 2, create a test dataframe for this one
df_2 <- gapminder %>%
group_by(country) %>%
mutate(
mean_value = mean(lifeExp),
sd_value = sd(lifeExp)
)
test_that("Output is correct", {
expect_identical(mean_sd(gapminder, country, lifeExp), df_2)
expect_s3_class(mean_sd(df_1, time, value), "tbl")
})
library(devtools)
create_package("~/functions_tessosbrn")
create_package("~/functions_tessosbrn/B2_package")
create_package("~/functions_tessosbrn/B2package")
here::dr_here()
create_package("~/stat545/B2/b2package")
